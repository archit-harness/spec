// Code generated by scripts/bitrise.go; DO NOT EDIT.

// Copyright 2022 Harness, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package yaml

import "encoding/json"

// E defines the member role.
type Role int

// Role enumeration.
const (
	RoleDeveloper Role = iota
	RoleAdmin
)

// String returns the Role as a string.
func (e Role) String() string {
	switch e {
	case RoleDeveloper:
		return "developer"
	case RoleAdmin:
		return "admin"
	default:
		return "developer"
	}
}

// MarshalJSON marshals the Type as a JSON string.
func (e Role) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

// UnmarshalJSON unmashals a quoted json string to the enum value.
func (e *Role) UnmarshalJSON(b []byte) error {
	var v string
	json.Unmarshal(b, &v)
	switch v {
	case "admin":
		*e = RoleAdmin
	case "developer":
		*e = RoleDeveloper
	default:
		*e = RoleDeveloper
	}
	return nil
}